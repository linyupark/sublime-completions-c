{
    "scope": "source.js - variable.other.js",
    "completions": [
        {
            "trigger": "ArrayBuffer();"
        },
        {
            "trigger": "Int8Array();"
        },
        {
            "trigger": "Uint8Array();"
        },
        {
            "trigger": "Int16Array();"
        },
        {
            "trigger": "Uint16Array();"
        },
        {
            "trigger": "Int32Array();"
        },
        {
            "trigger": "Uint32Array();"
        },
        {
            "trigger": "Float32Array();"
        },
        {
            "trigger": "Float64Array();"
        },
        {
            "trigger": "DataView();"
        },
        {
            "trigger": "Buffer(subject, encoding, offset);"
        },
        {
            "trigger": "setTimeout(function, milliseconds);",
            "contents": "setTimeout(${1:function}, ${2:milliseconds});"
        },
        {
            "trigger": "setInterval();",
            "contents": "setInterval(${1});"
        },
        {
            "trigger": "clearTimeout();"
        },
        {
            "trigger": "clearInterval();"
        },
        {
            "trigger": "process.EventEmitter();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:process\\.)/}EventEmitter(${1});"
        },
        {
            "trigger": "process.assert();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:process\\.)/}assert(${1});"
        },
        {
            "trigger": "process._tickCallback();"
        },
        {
            "trigger": "process.nextTick(callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:process\\.)/}nextTick(${1:callback});"
        },
        {
            "trigger": "process.openStdin();"
        },
        {
            "trigger": "process.exit(code);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:process\\.)/}exit(${1:code});"
        },
        {
            "trigger": "process.kill(pid, sig);"
        },
        {
            "trigger": "process.addListener(type, listener);"
        },
        {
            "trigger": "process._needTickCallback();"
        },
        {
            "trigger": "process.on(type, listener);"
        },
        {
            "trigger": "process.removeListener(type, listener);"
        },
        {
            "trigger": "process.reallyExit();"
        },
        {
            "trigger": "process.debug();"
        },
        {
            "trigger": "process.chdir();"
        },
        {
            "trigger": "process.cwd();"
        },
        {
            "trigger": "process.error();"
        },
        {
            "trigger": "process.umask();"
        },
        {
            "trigger": "process.watchFile();"
        },
        {
            "trigger": "process.getuid();"
        },
        {
            "trigger": "process.unwatchFile();"
        },
        {
            "trigger": "process.mixin();"
        },
        {
            "trigger": "process.setuid();"
        },
        {
            "trigger": "process.setgid();"
        },
        {
            "trigger": "process.createChildProcess();"
        },
        {
            "trigger": "process.getgid();"
        },
        {
            "trigger": "process.inherits();"
        },
        {
            "trigger": "process._kill();"
        },
        {
            "trigger": "process._byteLength();"
        },
        {
            "trigger": "process._debugProcess();"
        },
        {
            "trigger": "process.dlopen();"
        },
        {
            "trigger": "process.uptime();"
        },
        {
            "trigger": "process.memoryUsage();"
        },
        {
            "trigger": "process.uvCounters();"
        },
        {
            "trigger": "process.binding();"
        },
        {
            "trigger": "process.setMaxListeners(n);"
        },
        {
            "trigger": "process.emit();"
        },
        {
            "trigger": "process.once(type, listener);"
        },
        {
            "trigger": "process.removeAllListeners(type);"
        },
        {
            "trigger": "process.listeners(type);"
        },
        {
            "trigger": "require.resolve(request);"
        },
        {
            "trigger": "require.registerExtension();"
        },
        {
            "trigger": "_debugger.start(argv, stdin, stdout);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_debugger\\.)/}start(${1:argv}, ${2:stdin}, ${3:stdout});$0"
        },
        {
            "trigger": "_debugger.Protocol();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_debugger\\.)/}Protocol();$0"
        },
        {
            "trigger": "_debugger.Client();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_debugger\\.)/}Client();$0"
        },
        {
            "trigger": "_linklist.init(list);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_linklist\\.)/}init(${1:list});$0"
        },
        {
            "trigger": "_linklist.peek(list);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_linklist\\.)/}peek(${1:list});$0"
        },
        {
            "trigger": "_linklist.shift(list);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_linklist\\.)/}shift(${1:list});$0"
        },
        {
            "trigger": "_linklist.remove(item);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_linklist\\.)/}remove(${1:item});$0"
        },
        {
            "trigger": "_linklist.append(list, item);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_linklist\\.)/}append(${1:list}, ${2:item});$0"
        },
        {
            "trigger": "_linklist.isEmpty(list);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:_linklist\\.)/}isEmpty(${1:list});$0"
        },
        {
            "trigger": "assert.AssertionError;",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}AssertionError(${1:AssertionErro});$0"
        },
        {
            "trigger": "assert.fail(actual, expected, message, operator, stackStartFunction);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}fail(${1:actual}, ${2:expected}, ${3:message}, ${4:operator}, ${5:stackStartFunction});$0"
        },
        {
            "trigger": "assert.ok(value, message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}ok(${1:value}, ${2:message});$0"
        },
        {
            "trigger": "assert.equal(actual, expected, message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}equal(${1:actual}, ${2:expected}, ${3:message});$0"
        },
        {
            "trigger": "assert.notEqual(actual, expected, message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}notEqual(${1:actual}, ${2:expected}, ${3:message});$0"
        },
        {
            "trigger": "assert.deepEqual(actual, expected, message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}deepEqual(${1:actual}, ${2:expected}, ${3:message});$0"
        },
        {
            "trigger": "assert.notDeepEqual(actual, expected, message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}notDeepEqual(${1:actual}, ${2:expected}, ${3:message});$0"
        },
        {
            "trigger": "assert.strictEqual(actual, expected, message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}strictEqual(${1:actual}, ${2:expected}, ${3:message});$0"
        },
        {
            "trigger": "assert.notStrictEqual(actual, expected, message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}notStrictEqual(${1:actual}, ${2:expected}, ${3:message});$0"
        },
        {
            "trigger": "assert.throws(block, /*optional*/error, /*optional*/message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}throws(${1:block}, ${2:/*optional*/error}, ${3:/*optional*/message});$0"
        },
        {
            "trigger": "assert.doesNotThrow(block, /*optional*/error, /*optional*/message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}doesNotThrow(${1:block}, ${2:/*optional*/error}, ${3:/*optional*/message});$0"
        },
        {
            "trigger": "assert.ifError(err);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:assert\\.)/}ifError(${1:err});$0"
        },
        {
            "trigger": "buffer.SlowBuffer();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:buffer\\.)/}SlowBuffer();$0"
        },
        {
            "trigger": "buffer.Buffer(subject, encoding, offset);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:buffer\\.)/}Buffer(${1:subject}, ${2:encoding}, ${3:offset});$0"
        },
        {
            "trigger": "buffer_ieee754.readIEEE754(buffer, offset, isBE, mLen, nBytes);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:buffer_ieee754\\.)/}readIEEE754(${1:buffer}, ${2:offset}, ${3:isBE}, ${4:mLen}, ${5:nBytes});$0"
        },
        {
            "trigger": "buffer_ieee754.writeIEEE754(buffer, value, offset, isBE, mLen, nBytes);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:buffer_ieee754\\.)/}writeIEEE754(${1:buffer}, ${2:value}, ${3:offset}, ${4:isBE}, ${5:mLen}, ${6:nBytes});$0"
        },
        {
            "trigger": "child_process.fork(modulePath, args, options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:child_process\\.)/}fork(${1:modulePath}, ${2:args}, ${3:options});$0"
        },
        {
            "trigger": "child_process._forkChild();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:child_process\\.)/}_forkChild();$0"
        },
        {
            "trigger": "child_process.exec(command /*, options, callback */);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:child_process\\.)/}exec(${1:command}, ${2:/*}, ${3:options}, ${4:callback}, ${5:*/});$0"
        },
        {
            "trigger": "child_process.execFile(file /* args, options, callback */);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:child_process\\.)/}execFile(${1:file}, ${2:/*}, ${3:args}, ${4:options}, ${5:callback}, ${6:*/});$0"
        },
        {
            "trigger": "child_process.spawn(file, args, options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:child_process\\.)/}spawn(${1:file}, ${2:args}, ${3:options});$0"
        },
        {
            "trigger": "cluster.fork();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}fork();$0"
        },
        {
            "trigger": "cluster._startWorker();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}_startWorker();$0"
        },
        {
            "trigger": "cluster._getServer(address, port, addressType, cb);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}_getServer(${1:address}, ${2:port}, ${3:addressType}, ${4:cb});$0"
        },
        {
            "trigger": "cluster.setMaxListeners(n);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}setMaxListeners(${1:n});$0"
        },
        {
            "trigger": "cluster.emit();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}emit();$0"
        },
        {
            "trigger": "cluster.addListener(type, listener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}addListener(${1:type}, ${2:listener});$0"
        },
        {
            "trigger": "cluster.on(type, listener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}on(${1:type}, ${2:listener});$0"
        },
        {
            "trigger": "cluster.once(type, listener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}once(${1:type}, ${2:listener});$0"
        },
        {
            "trigger": "cluster.removeListener(type, listener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}removeListener(${1:type}, ${2:listener});$0"
        },
        {
            "trigger": "cluster.removeAllListeners(type);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}removeAllListeners(${1:type});$0"
        },
        {
            "trigger": "cluster.listeners(type);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:cluster\\.)/}listeners(${1:type});$0"
        },
        {
            "trigger": "console.log(message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}log(${1:message});$0"
        },
        {
            "trigger": "console.info(message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}info(${1:message});$0"
        },
        {
            "trigger": "console.warn(message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}warn(${1:message});$0"
        },
        {
            "trigger": "console.error(message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}error(${1:message});$0"
        },
        {
            "trigger": "console.dir(object);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}dir(${1:object});$0"
        },
        {
            "trigger": "console.time(label);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}time(${1:label});$0"
        },
        {
            "trigger": "console.timeEnd(label);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}timeEnd(${1:label});$0"
        },
        {
            "trigger": "console.trace(label);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}trace(${1:label});$0"
        },
        {
            "trigger": "console.assert(expression);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:console\\.)/}assert(${1:expression});$0"
        },
        {
            "trigger": "crypto.Credentials(secureProtocol, flags, context);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}Credentials(${1:secureProtocol}, ${2:flags}, ${3:context});$0"
        },
        {
            "trigger": "crypto.createCredentials(options, context);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createCredentials(${1:options}, ${2:context});$0"
        },
        {
            "trigger": "crypto.Hash();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}Hash();$0"
        },
        {
            "trigger": "crypto.createHash(hash);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createHash(${1:hash});$0"
        },
        {
            "trigger": "crypto.Hmac();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}Hmac();$0"
        },
        {
            "trigger": "crypto.createHmac(hmac, key);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createHmac(${1:hmac}, ${2:key});$0"
        },
        {
            "trigger": "crypto.Cipher();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}Cipher();$0"
        },
        {
            "trigger": "crypto.createCipher(cipher, password);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createCipher(${1:cipher}, ${2:password});$0"
        },
        {
            "trigger": "crypto.createCipheriv(cipher, key, iv);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createCipheriv(${1:cipher}, ${2:key}, ${3:iv});$0"
        },
        {
            "trigger": "crypto.Decipher();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}Decipher();$0"
        },
        {
            "trigger": "crypto.createDecipher(cipher, password);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createDecipher(${1:cipher}, ${2:password});$0"
        },
        {
            "trigger": "crypto.createDecipheriv(cipher, key, iv);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createDecipheriv(${1:cipher}, ${2:key}, ${3:iv});$0"
        },
        {
            "trigger": "crypto.Sign();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}Sign();$0"
        },
        {
            "trigger": "crypto.createSign(algorithm);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createSign(${1:algorithm});$0"
        },
        {
            "trigger": "crypto.Verify();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}Verify();$0"
        },
        {
            "trigger": "crypto.createVerify(algorithm);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createVerify(${1:algorithm});$0"
        },
        {
            "trigger": "crypto.DiffieHellman();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}DiffieHellman();$0"
        },
        {
            "trigger": "crypto.createDiffieHellman(size_or_key, enc);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}createDiffieHellman(${1:size_or_key}, ${2:enc});$0"
        },
        {
            "trigger": "crypto.pbkdf2();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}pbkdf2();$0"
        },
        {
            "trigger": "crypto.randomBytes();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}randomBytes();$0"
        },
        {
            "trigger": "crypto.pseudoRandomBytes();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}pseudoRandomBytes();$0"
        },
        {
            "trigger": "crypto.rng();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}rng();$0"
        },
        {
            "trigger": "crypto.prng();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:crypto\\.)/}prng();$0"
        },
        {
            "trigger": "dgram.Socket(type, listener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dgram\\.)/}Socket(${1:type}, ${2:listener});$0"
        },
        {
            "trigger": "dgram.createSocket(type, listener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dgram\\.)/}createSocket(${1:type}, ${2:listener});$0"
        },
        {
            "trigger": "dns.lookup(domain, family, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}lookup(${1:domain}, ${2:family}, ${3:callback});$0"
        },
        {
            "trigger": "dns.resolve4(name, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}resolve4(${1:name}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolve6(name, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}resolve6(${1:name}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveCname(name, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}resolveCname(${1:name}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveMx(name, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}resolveMx(${1:name}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveNs(name, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}resolveNs(${1:name}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveTxt(name, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}resolveTxt(${1:name}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveSrv(name, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}resolveSrv(${1:name}, ${2:callback});$0"
        },
        {
            "trigger": "dns.reverse(name, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}reverse(${1:name}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolve(domain, type_, callback_);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:dns\\.)/}resolve(${1:domain}, ${2:type_}, ${3:callback_});$0"
        },
        {
            "trigger": "events.EventEmitter();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:events\\.)/}EventEmitter();$0"
        },
        {
            "trigger": "freelist.FreeList(name, max, constructor);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:freelist\\.)/}FreeList(${1:name}, ${2:max}, ${3:constructor});$0"
        },
        {
            "trigger": "fs.Stats();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}Stats();$0"
        },
        {
            "trigger": "fs.readFile(path, encoding_);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}readFile(${1:path}, ${2:encoding_});$0"
        },
        {
            "trigger": "fs.readFileSync(path, encoding);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}readFileSync(${1:path}, ${2:encoding});$0"
        },
        {
            "trigger": "fs.close(fd, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}close(${1:fd}, ${2:callback});$0"
        },
        {
            "trigger": "fs.closeSync(fd);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}closeSync(${1:fd});$0"
        },
        {
            "trigger": "fs.open(path, flags, mode, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}open(${1:path}, ${2:flags}, ${3:mode}, ${4:callback});$0"
        },
        {
            "trigger": "fs.openSync(path, flags, mode);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}openSync(${1:path}, ${2:flags}, ${3:mode});$0"
        },
        {
            "trigger": "fs.read(fd, buffer, offset, length, position, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}read(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position}, ${6:callback});$0"
        },
        {
            "trigger": "fs.readSync(fd, buffer, offset, length, position);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}readSync(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position});$0"
        },
        {
            "trigger": "fs.write(fd, buffer, offset, length, position, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}write(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position}, ${6:callback});$0"
        },
        {
            "trigger": "fs.writeSync(fd, buffer, offset, length, position);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}writeSync(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position});$0"
        },
        {
            "trigger": "fs.rename(oldPath, newPath, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}rename(${1:oldPath}, ${2:newPath}, ${3:callback});$0"
        },
        {
            "trigger": "fs.renameSync(oldPath, newPath);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}renameSync(${1:oldPath}, ${2:newPath});$0"
        },
        {
            "trigger": "fs.truncate(fd, len, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}truncate(${1:fd}, ${2:len}, ${3:callback});$0"
        },
        {
            "trigger": "fs.truncateSync(fd, len);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}truncateSync(${1:fd}, ${2:len});$0"
        },
        {
            "trigger": "fs.rmdir(path, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}rmdir(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.rmdirSync(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}rmdirSync(${1:path});$0"
        },
        {
            "trigger": "fs.fdatasync(fd, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fdatasync(${1:fd}, ${2:callback});$0"
        },
        {
            "trigger": "fs.fdatasyncSync(fd);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fdatasyncSync(${1:fd});$0"
        },
        {
            "trigger": "fs.fsync(fd, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fsync(${1:fd}, ${2:callback});$0"
        },
        {
            "trigger": "fs.fsyncSync(fd);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fsyncSync(${1:fd});$0"
        },
        {
            "trigger": "fs.mkdir(path, mode, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}mkdir(${1:path}, ${2:mode}, ${3:callback});$0"
        },
        {
            "trigger": "fs.mkdirSync(path, mode);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}mkdirSync(${1:path}, ${2:mode});$0"
        },
        {
            "trigger": "fs.sendfile(outFd, inFd, inOffset, length, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}sendfile(${1:outFd}, ${2:inFd}, ${3:inOffset}, ${4:length}, ${5:callback});$0"
        },
        {
            "trigger": "fs.sendfileSync(outFd, inFd, inOffset, length);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}sendfileSync(${1:outFd}, ${2:inFd}, ${3:inOffset}, ${4:length});$0"
        },
        {
            "trigger": "fs.readdir(path, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}readdir(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.readdirSync(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}readdirSync(${1:path});$0"
        },
        {
            "trigger": "fs.fstat(fd, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fstat(${1:fd}, ${2:callback});$0"
        },
        {
            "trigger": "fs.lstat(path, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}lstat(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.stat(path, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}stat(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.fstatSync(fd);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fstatSync(${1:fd});$0"
        },
        {
            "trigger": "fs.lstatSync(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}lstatSync(${1:path});$0"
        },
        {
            "trigger": "fs.statSync(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}statSync(${1:path});$0"
        },
        {
            "trigger": "fs.readlink(path, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}readlink(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.readlinkSync(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}readlinkSync(${1:path});$0"
        },
        {
            "trigger": "fs.symlink(destination, path, type_, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}symlink(${1:destination}, ${2:path}, ${3:type_}, ${4:callback});$0"
        },
        {
            "trigger": "fs.symlinkSync(destination, path, type);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}symlinkSync(${1:destination}, ${2:path}, ${3:type});$0"
        },
        {
            "trigger": "fs.link(srcpath, dstpath, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}link(${1:srcpath}, ${2:dstpath}, ${3:callback});$0"
        },
        {
            "trigger": "fs.linkSync(srcpath, dstpath);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}linkSync(${1:srcpath}, ${2:dstpath});$0"
        },
        {
            "trigger": "fs.unlink(path, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}unlink(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.unlinkSync(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}unlinkSync(${1:path});$0"
        },
        {
            "trigger": "fs.fchmod(fd, mode, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fchmod(${1:fd}, ${2:mode}, ${3:callback});$0"
        },
        {
            "trigger": "fs.fchmodSync(fd, mode);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fchmodSync(${1:fd}, ${2:mode});$0"
        },
        {
            "trigger": "fs.chmod(path, mode, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}chmod(${1:path}, ${2:mode}, ${3:callback});$0"
        },
        {
            "trigger": "fs.chmodSync(path, mode);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}chmodSync(${1:path}, ${2:mode});$0"
        },
        {
            "trigger": "fs.fchown(fd, uid, gid, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fchown(${1:fd}, ${2:uid}, ${3:gid}, ${4:callback});$0"
        },
        {
            "trigger": "fs.fchownSync(fd, uid, gid);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}fchownSync(${1:fd}, ${2:uid}, ${3:gid});$0"
        },
        {
            "trigger": "fs.chown(path, uid, gid, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}chown(${1:path}, ${2:uid}, ${3:gid}, ${4:callback});$0"
        },
        {
            "trigger": "fs.chownSync(path, uid, gid);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}chownSync(${1:path}, ${2:uid}, ${3:gid});$0"
        },
        {
            "trigger": "fs._toUnixTimestamp(time);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}_toUnixTimestamp(${1:time});$0"
        },
        {
            "trigger": "fs.utimes(path, atime, mtime, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}utimes(${1:path}, ${2:atime}, ${3:mtime}, ${4:callback});$0"
        },
        {
            "trigger": "fs.utimesSync(path, atime, mtime);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}utimesSync(${1:path}, ${2:atime}, ${3:mtime});$0"
        },
        {
            "trigger": "fs.futimes(fd, atime, mtime, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}futimes(${1:fd}, ${2:atime}, ${3:mtime}, ${4:callback});$0"
        },
        {
            "trigger": "fs.futimesSync(fd, atime, mtime);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}futimesSync(${1:fd}, ${2:atime}, ${3:mtime});$0"
        },
        {
            "trigger": "fs.writeFile(path, data, encoding_, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}writeFile(${1:path}, ${2:data}, ${3:encoding_}, ${4:callback});$0"
        },
        {
            "trigger": "fs.writeFileSync(path, data, encoding);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}writeFileSync(${1:path}, ${2:data}, ${3:encoding});$0"
        },
        {
            "trigger": "fs.watch(filename);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}watch(${1:filename});$0"
        },
        {
            "trigger": "fs.watchFile(filename);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}watchFile(${1:filename});$0"
        },
        {
            "trigger": "fs.unwatchFile(filename);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}unwatchFile(${1:filename});$0"
        },
        {
            "trigger": "fs.realpathSync(p, cache);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}realpathSync(${1:p}, ${2:cache});$0"
        },
        {
            "trigger": "fs.realpath(p, cache, cb);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}realpath(${1:p}, ${2:cache}, ${3:cb});$0"
        },
        {
            "trigger": "fs.createReadStream(path, options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}createReadStream(${1:path}, ${2:options});$0"
        },
        {
            "trigger": "fs.ReadStream(path, options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}ReadStream(${1:path}, ${2:options});$0"
        },
        {
            "trigger": "fs.FileReadStream(path, options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}FileReadStream(${1:path}, ${2:options});$0"
        },
        {
            "trigger": "fs.createWriteStream(path, options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}createWriteStream(${1:path}, ${2:options});$0"
        },
        {
            "trigger": "fs.WriteStream(path, options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}WriteStream(${1:path}, ${2:options});$0"
        },
        {
            "trigger": "fs.FileWriteStream(path, options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}FileWriteStream(${1:path}, ${2:options});$0"
        },
        {
            "trigger": "fs.SyncWriteStream(fd);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:fs\\.)/}SyncWriteStream(${1:fd});$0"
        },
        {
            "trigger": "http.IncomingMessage(socket);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}IncomingMessage(${1:socket});$0"
        },
        {
            "trigger": "http.OutgoingMessage();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}OutgoingMessage();$0"
        },
        {
            "trigger": "http.ServerResponse(req);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}ServerResponse(${1:req});$0"
        },
        {
            "trigger": "http.Agent(options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}Agent(${1:options});$0"
        },
        {
            "trigger": "http.ClientRequest(options, cb);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}ClientRequest(${1:options}, ${2:cb});$0"
        },
        {
            "trigger": "http.request(options, cb);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}request(${1:options}, ${2:cb});$0"
        },
        {
            "trigger": "http.get(options, cb);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}get(${1:options}, ${2:cb});$0"
        },
        {
            "trigger": "http.Server(requestListener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}Server(${1:requestListener});$0"
        },
        {
            "trigger": "http.createServer(requestListener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}createServer(${1:requestListener});$0"
        },
        {
            "trigger": "http._connectionListener(socket);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}_connectionListener(${1:socket});$0"
        },
        {
            "trigger": "http.Client(port, host);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}Client(${1:port}, ${2:host});$0"
        },
        {
            "trigger": "http.createClient(port, host);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:http\\.)/}createClient(${1:port}, ${2:host});$0"
        },
        {
            "trigger": "https.Server(opts, requestListener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:https\\.)/}Server(${1:opts}, ${2:requestListener});$0"
        },
        {
            "trigger": "https.createServer(opts, requestListener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:https\\.)/}createServer(${1:opts}, ${2:requestListener});$0"
        },
        {
            "trigger": "https.Agent(options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:https\\.)/}Agent(${1:options});$0"
        },
        {
            "trigger": "https.request(options, cb);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:https\\.)/}request(${1:options}, ${2:cb});$0"
        },
        {
            "trigger": "https.get(options, cb);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:https\\.)/}get(${1:options}, ${2:cb});$0"
        },
        {
            "trigger": "module.wrap(script);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}wrap(${1:script});$0"
        },
        {
            "trigger": "module._debug();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}_debug();$0"
        },
        {
            "trigger": "module._findPath(request, paths);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}_findPath(${1:request}, ${2:paths});$0"
        },
        {
            "trigger": "module._nodeModulePaths(from);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}_nodeModulePaths(${1:from});$0"
        },
        {
            "trigger": "module._resolveLookupPaths(request, parent);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}_resolveLookupPaths(${1:request}, ${2:parent});$0"
        },
        {
            "trigger": "module._load(request, parent, isMain);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}_load(${1:request}, ${2:parent}, ${3:isMain});$0"
        },
        {
            "trigger": "module._resolveFilename(request, parent);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}_resolveFilename(${1:request}, ${2:parent});$0"
        },
        {
            "trigger": "module.runMain();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}runMain();$0"
        },
        {
            "trigger": "module._initPaths();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}_initPaths();$0"
        },
        {
            "trigger": "module.requireRepl();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}requireRepl();$0"
        },
        {
            "trigger": "module.Module(id, parent);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:module\\.)/}Module(${1:id}, ${2:parent});$0"
        },
        {
            "trigger": "net.createServer();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}createServer();$0"
        },
        {
            "trigger": "net.createConnection(port /* [host], [cb] */);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}createConnection(${1:port}, ${2:/*}, ${3:[host]}, ${4:[cb]}, ${5:*/});$0"
        },
        {
            "trigger": "net.connect(port /* [host], [cb] */);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}connect(${1:port}, ${2:/*}, ${3:[host]}, ${4:[cb]}, ${5:*/});$0"
        },
        {
            "trigger": "net.Socket(options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}Socket(${1:options});$0"
        },
        {
            "trigger": "net.Stream(options);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}Stream(${1:options});$0"
        },
        {
            "trigger": "net.Server(/* [ options, ] listener */);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}Server(${1:/*}, ${2:[}, ${3:options}, ${4:]}, ${5:listener}, ${6:*/});$0"
        },
        {
            "trigger": "net._createServerHandle(address, port, addressType);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}_createServerHandle(${1:address}, ${2:port}, ${3:addressType});$0"
        },
        {
            "trigger": "net.isIP(input);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}isIP(${1:input});$0"
        },
        {
            "trigger": "net.isIPv4(input);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}isIPv4(${1:input});$0"
        },
        {
            "trigger": "net.isIPv6(input);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:net\\.)/}isIPv6(${1:input});$0"
        },
        {
            "trigger": "os.hostname();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}hostname();$0"
        },
        {
            "trigger": "os.loadavg();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}loadavg();$0"
        },
        {
            "trigger": "os.uptime();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}uptime();$0"
        },
        {
            "trigger": "os.freemem();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}freemem();$0"
        },
        {
            "trigger": "os.totalmem();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}totalmem();$0"
        },
        {
            "trigger": "os.cpus();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}cpus();$0"
        },
        {
            "trigger": "os.type();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}type();$0"
        },
        {
            "trigger": "os.release();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}release();$0"
        },
        {
            "trigger": "os.networkInterfaces();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}networkInterfaces();$0"
        },
        {
            "trigger": "os.arch();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}arch();$0"
        },
        {
            "trigger": "os.platform();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}platform();$0"
        },
        {
            "trigger": "os.getNetworkInterfaces();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:os\\.)/}getNetworkInterfaces();$0"
        },
        {
            "trigger": "path.resolve();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}resolve();$0"
        },
        {
            "trigger": "path.normalize(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}normalize(${1:path});$0"
        },
        {
            "trigger": "path.join();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}join();$0"
        },
        {
            "trigger": "path.relative(from, to);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}relative(${1:from}, ${2:to});$0"
        },
        {
            "trigger": "path.dirname(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}dirname(${1:path});$0"
        },
        {
            "trigger": "path.basename(path, ext);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}basename(${1:path}, ${2:ext});$0"
        },
        {
            "trigger": "path.extname(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}extname(${1:path});$0"
        },
        {
            "trigger": "path.exists(path, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}exists(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "path.existsSync(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}existsSync(${1:path});$0"
        },
        {
            "trigger": "path._makeLong(path);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:path\\.)/}_makeLong(${1:path});$0"
        },
        {
            "trigger": "punycode.decode(input);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:punycode\\.)/}decode(${1:input});$0"
        },
        {
            "trigger": "punycode.encode(input);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:punycode\\.)/}encode(${1:input});$0"
        },
        {
            "trigger": "punycode.toASCII(domain);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:punycode\\.)/}toASCII(${1:domain});$0"
        },
        {
            "trigger": "punycode.toUnicode(domain);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:punycode\\.)/}toUnicode(${1:domain});$0"
        },
        {
            "trigger": "querystring.unescapeBuffer(s, decodeSpaces);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:querystring\\.)/}unescapeBuffer(${1:s}, ${2:decodeSpaces});$0"
        },
        {
            "trigger": "querystring.unescape(s, decodeSpaces);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:querystring\\.)/}unescape(${1:s}, ${2:decodeSpaces});$0"
        },
        {
            "trigger": "querystring.escape(str);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:querystring\\.)/}escape(${1:str});$0"
        },
        {
            "trigger": "querystring.encode(obj, sep, eq, name);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:querystring\\.)/}encode(${1:obj}, ${2:sep}, ${3:eq}, ${4:name});$0"
        },
        {
            "trigger": "querystring.stringify(obj, sep, eq, name);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:querystring\\.)/}stringify(${1:obj}, ${2:sep}, ${3:eq}, ${4:name});$0"
        },
        {
            "trigger": "querystring.decode(qs, sep, eq);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:querystring\\.)/}decode(${1:qs}, ${2:sep}, ${3:eq});$0"
        },
        {
            "trigger": "querystring.parse(qs, sep, eq);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:querystring\\.)/}parse(${1:qs}, ${2:sep}, ${3:eq});$0"
        },
        {
            "trigger": "readline.createInterface(input, output, completer);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:readline\\.)/}createInterface(${1:input}, ${2:output}, ${3:completer});$0"
        },
        {
            "trigger": "readline.Interface(input, output, completer);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:readline\\.)/}Interface(${1:input}, ${2:output}, ${3:completer});$0"
        },
        {
            "trigger": "repl.writer(obj, showHidden, depth, colors);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:repl\\.)/}writer(${1:obj}, ${2:showHidden}, ${3:depth}, ${4:colors});$0"
        },
        {
            "trigger": "repl.REPLServer(prompt, stream, eval, useGlobal, ignoreUndefined);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:repl\\.)/}REPLServer(${1:prompt}, ${2:stream}, ${3:eval}, ${4:useGlobal}, ${5:ignoreUndefined});$0"
        },
        {
            "trigger": "repl.start(prompt, source, eval, useGlobal, ignoreUndefined);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:repl\\.)/}start(${1:prompt}, ${2:source}, ${3:eval}, ${4:useGlobal}, ${5:ignoreUndefined});$0"
        },
        {
            "trigger": "stream.super_();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:stream\\.)/}super_();$0"
        },
        {
            "trigger": "stream.Stream();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:stream\\.)/}Stream();$0"
        },
        {
            "trigger": "string_decoder.StringDecoder(encoding);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:string_decoder\\.)/}StringDecoder(${1:encoding});$0"
        },
        {
            "trigger": "sys.print();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}print();$0"
        },
        {
            "trigger": "sys.puts();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}puts();$0"
        },
        {
            "trigger": "sys.debug(x);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}debug(${1:x});$0"
        },
        {
            "trigger": "sys.error(x);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}error(${1:x});$0"
        },
        {
            "trigger": "sys.inspect(obj, showHidden, depth, colors);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}inspect(${1:obj}, ${2:showHidden}, ${3:depth}, ${4:colors});$0"
        },
        {
            "trigger": "sys.p();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}p();$0"
        },
        {
            "trigger": "sys.log(msg);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}log(${1:msg});$0"
        },
        {
            "trigger": "sys.exec();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}exec();$0"
        },
        {
            "trigger": "sys.pump(readStream, writeStream, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}pump(${1:readStream}, ${2:writeStream}, ${3:callback});$0"
        },
        {
            "trigger": "sys.inherits(ctor, superCtor);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:sys\\.)/}inherits(${1:ctor}, ${2:superCtor});$0"
        },
        {
            "trigger": "timers.unenroll(item);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:timers\\.)/}unenroll(${1:item});$0"
        },
        {
            "trigger": "timers.enroll(item, msecs);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:timers\\.)/}enroll(${1:item}, ${2:msecs});$0"
        },
        {
            "trigger": "timers.active(item);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:timers\\.)/}active(${1:item});$0"
        },
        {
            "trigger": "timers.setTimeout(callback, after);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:timers\\.)/}setTimeout(${1:callback}, ${2:after});$0"
        },
        {
            "trigger": "timers.clearTimeout(timer);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:timers\\.)/}clearTimeout(${1:timer});$0"
        },
        {
            "trigger": "timers.setInterval(callback, repeat);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:timers\\.)/}setInterval(${1:callback}, ${2:repeat});$0"
        },
        {
            "trigger": "timers.clearInterval(timer);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:timers\\.)/}clearInterval(${1:timer});$0"
        },
        {
            "trigger": "tls.createSecurePair(credentials,\n                                    isServer,\n                                    requestCert,\n                                    rejectUnauthorized);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tls\\.)/}createSecurePair(${1:credentials}, ${2:\n}, ${3:isServer}, ${4:\n}, ${5:requestCert}, ${6:\n}, ${7:rejectUnauthorized});$0"
        },
        {
            "trigger": "tls.Server(/* [options], listener */);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tls\\.)/}Server(${1:/*}, ${2:[options]}, ${3:listener}, ${4:*/});$0"
        },
        {
            "trigger": "tls.createServer(options, listener);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tls\\.)/}createServer(${1:options}, ${2:listener});$0"
        },
        {
            "trigger": "tls.connect(port /* host, options, cb */);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tls\\.)/}connect(${1:port}, ${2:/*}, ${3:host}, ${4:options}, ${5:cb}, ${6:*/});$0"
        },
        {
            "trigger": "tty.isatty(fd);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tty\\.)/}isatty(${1:fd});$0"
        },
        {
            "trigger": "tty.setRawMode(flag);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tty\\.)/}setRawMode(${1:flag});$0"
        },
        {
            "trigger": "tty.getWindowSize();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tty\\.)/}getWindowSize();$0"
        },
        {
            "trigger": "tty.setWindowSize();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tty\\.)/}setWindowSize();$0"
        },
        {
            "trigger": "tty.ReadStream(fd);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tty\\.)/}ReadStream(${1:fd});$0"
        },
        {
            "trigger": "tty.WriteStream(fd);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:tty\\.)/}WriteStream(${1:fd});$0"
        },
        {
            "trigger": "url.parse(url, parseQueryString, slashesDenoteHost);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:url\\.)/}parse(${1:url}, ${2:parseQueryString}, ${3:slashesDenoteHost});$0"
        },
        {
            "trigger": "url.resolve(source, relative);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:url\\.)/}resolve(${1:source}, ${2:relative});$0"
        },
        {
            "trigger": "url.resolveObject(source, relative);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:url\\.)/}resolveObject(${1:source}, ${2:relative});$0"
        },
        {
            "trigger": "url.format(obj);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:url\\.)/}format(${1:obj});$0"
        },
        {
            "trigger": "util.format(f);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}format(${1:f});$0"
        },
        {
            "trigger": "util.print();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}print();$0"
        },
        {
            "trigger": "util.puts();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}puts();$0"
        },
        {
            "trigger": "util.debug(x);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}debug(${1:x});$0"
        },
        {
            "trigger": "util.error(x);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}error(${1:x});$0"
        },
        {
            "trigger": "util.inspect(obj, showHidden, depth, colors);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}inspect(${1:obj}, ${2:showHidden}, ${3:depth}, ${4:colors});$0"
        },
        {
            "trigger": "util.isArray(ar);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}isArray(${1:ar});$0"
        },
        {
            "trigger": "util.isRegExp(re);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}isRegExp(${1:re});$0"
        },
        {
            "trigger": "util.isDate(d);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}isDate(${1:d});$0"
        },
        {
            "trigger": "util.isError(e);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}isError(${1:e});$0"
        },
        {
            "trigger": "util.p();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}p();$0"
        },
        {
            "trigger": "util.log(msg);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}log(${1:msg});$0"
        },
        {
            "trigger": "util.exec();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}exec();$0"
        },
        {
            "trigger": "util.pump(readStream, writeStream, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}pump(${1:readStream}, ${2:writeStream}, ${3:callback});$0"
        },
        {
            "trigger": "util.inherits(ctor, superCtor);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}inherits(${1:ctor}, ${2:superCtor});$0"
        },
        {
            "trigger": "util._deprecationWarning(moduleId, message);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:util\\.)/}_deprecationWarning(${1:moduleId}, ${2:message});$0"
        },
        {
            "trigger": "vm.Script();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:vm\\.)/}Script();$0"
        },
        {
            "trigger": "vm.createScript(code, ctx, name);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:vm\\.)/}createScript(${1:code}, ${2:ctx}, ${3:name});$0"
        },
        {
            "trigger": "vm.createContext();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:vm\\.)/}createContext();$0"
        },
        {
            "trigger": "vm.runInContext();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:vm\\.)/}runInContext();$0"
        },
        {
            "trigger": "vm.runInThisContext();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:vm\\.)/}runInThisContext();$0"
        },
        {
            "trigger": "vm.runInNewContext();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:vm\\.)/}runInNewContext();$0"
        },
        {
            "trigger": "zlib.Zlib();",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}Zlib();$0"
        },
        {
            "trigger": "zlib.Deflate(opts);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}Deflate(${1:opts});$0"
        },
        {
            "trigger": "zlib.Inflate(opts);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}Inflate(${1:opts});$0"
        },
        {
            "trigger": "zlib.Gzip(opts);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}Gzip(${1:opts});$0"
        },
        {
            "trigger": "zlib.Gunzip(opts);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}Gunzip(${1:opts});$0"
        },
        {
            "trigger": "zlib.DeflateRaw(opts);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}DeflateRaw(${1:opts});$0"
        },
        {
            "trigger": "zlib.InflateRaw(opts);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}InflateRaw(${1:opts});$0"
        },
        {
            "trigger": "zlib.Unzip(opts);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}Unzip(${1:opts});$0"
        },
        {
            "trigger": "zlib.createDeflate(o);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}createDeflate(${1:o});$0"
        },
        {
            "trigger": "zlib.createInflate(o);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}createInflate(${1:o});$0"
        },
        {
            "trigger": "zlib.createDeflateRaw(o);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}createDeflateRaw(${1:o});$0"
        },
        {
            "trigger": "zlib.createInflateRaw(o);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}createInflateRaw(${1:o});$0"
        },
        {
            "trigger": "zlib.createGzip(o);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}createGzip(${1:o});$0"
        },
        {
            "trigger": "zlib.createGunzip(o);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}createGunzip(${1:o});$0"
        },
        {
            "trigger": "zlib.createUnzip(o);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}createUnzip(${1:o});$0"
        },
        {
            "trigger": "zlib.deflate(buffer, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}deflate(${1:buffer}, ${2:callback});$0"
        },
        {
            "trigger": "zlib.gzip(buffer, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}gzip(${1:buffer}, ${2:callback});$0"
        },
        {
            "trigger": "zlib.deflateRaw(buffer, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}deflateRaw(${1:buffer}, ${2:callback});$0"
        },
        {
            "trigger": "zlib.unzip(buffer, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}unzip(${1:buffer}, ${2:callback});$0"
        },
        {
            "trigger": "zlib.inflate(buffer, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}inflate(${1:buffer}, ${2:callback});$0"
        },
        {
            "trigger": "zlib.gunzip(buffer, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}gunzip(${1:buffer}, ${2:callback});$0"
        },
        {
            "trigger": "zlib.inflateRaw(buffer, callback);",
            "contents": "${TM_CURRENT_LINE/.+\\.$|(.*)/(?1:zlib\\.)/}inflateRaw(${1:buffer}, ${2:callback});$0"
        }
    ]
}